name: CI/CD Pipeline

on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    branches:
      - '**'

jobs:
  #Test's job
  tests:
    name: Unit tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    # Enviroment configuration
    env:
      MYSQLDB_USER: ${{ secrets.MYSQLDB_USER }}
      MYSQLDB_ROOT_PASSWORD: ${{ secrets.MYSQLDB_ROOT_PASSWORD }}
#      MYSQLDB_DATABASE: ${{ variables.MYSQLDB_DATABASE }}
#      MYSQLDB_LOCAL_PORT: ${{ variables.MYSQLDB_LOCAL_PORT }}
#      MYSQLDB_DOCKER_PORT: ${{ variables.MYSQLDB_DOCKER_PORT }}
#      SPRING_LOCAL_PORT: ${{ variables.SPRING_LOCAL_PORT }}
#      SPRING_DOCKER_PORT: ${{ variables.SPRING_DOCKER_PORT }}

    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run Tests
      - name: Run Tests
        run: mvn -B test

  build_and_push:
    name: Build & Push to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v3
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Build and Push to DockerHub
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: yenmai478/simpleapp:latest

  deploy_to_droplet:
    runs-on: ubuntu-latest
    needs: build_and_push
    name: Deploy to Droplet
    steps:
      - name: Connect with SSH and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
#          key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          
          script: |
            mkdir -p simpleapp
            cd /simpleapp
            docker-compose stop simpleapp
            docker pull yenmai478/simpleapp:latest
            docker-compose up -d
